-- {} indicate user-entered information
-- [] indicates a parameter that may be saved (CID, WID, or any other ID)
   --> need to figure out how to specify this. Save as temp var in Python?


-- find order history for a customer with an online account
select OrderID, Odate, Total, TrackNo, Status
from Orders natural join OnlineAcc natural join OrderShip
where email = {customer email}

-- find specific order details for online customer
select OrderProd.PID, OrderProd.Quantity, Status, Price, ProductName
from OrderProd natural join Orders inner join ProdInv on ProdInv.InvID = Orders.InvID and ProdInv.PID = OrderProd.PID inner join Products on ProdInv.PID = Products.PID
where OrderID = {OrderID}

-- new user (no online account)
insert into Customer values (null, {name}, False);
insert into CustAddress values ([CID], {street}, {city}, {state}, {zip}),
insert into Credit values ([CID], {card number}, 1000);

-- ....and new user (online account)
insert into Customer values (null, {name}, True);
insert into OnlineAcc values ([CID], {email}, {password}) # check password > 6?

-- search for warehouses (online customers)

select WID, Street, City, State, Zipcode, Region
from Warehouses natural join ADDRESSES

-- search for products from a warehouse
select PID, UPC, ProductName, BrandName, CategoryName, Quantity, Price
from ProdInv natural join Warehouses natural join Products natural join Brands natural join Categories
where WID = [WID]

-- add order details for in person customer
insert into Customer values (null, null, False)
insert into Orders values (null, [CID], {InvInv}, 'Complete', {Total}, [Date]])
for...
    insert into OrderProd values ([OID], {PID}, {Quantity})
--... and update in inventory
-- already a trigger in SQL -->
create trigger order_placed after insert on OrderProd
for each row
begin
    update ProdInv
    set Quantity = Quantity - :new.Quantity
    where PID = :new.PID and InvID = :new.InvID;
end;


-- add restock details
insert into Restock values (null, {InvID}, {ManID}, [Date], 'Pending')
for...
    insert into RestockProd values ([OID], {PID}, {Quantity})
-- ... and update in inventory
-- already a trigger in SQL -->
create trigger restock_placed after insert on RestockProd
for each row
begin
    update ProdInv
    set Quantity = Quantity + :new.Quantity
    where PID = :new.PID and InvID = :new.InvID;
end;
/

-- statisics
create function stat_prod (@PID varchar(8))
    returns table (
        PID varchar(8),
        OrderID int,
        InvID varchar(6),
        CID int,
        Status varchar(10),
        Total numeric(8,2),
        Odate date,
        BrandID varchar(8),
        CategoryID varchar(8),
        ProductName varchar(20))
    return table
        (select * from Orders natural join OrderProd natural join Products
            where PID = @PID)


    )

-- In Python??
